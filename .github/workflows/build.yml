name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: art-design-backend
      CONTAINER_NAME: art-design-backend
      CONSUL_ADDR: my-consul:8500
      CONSUL_CONFIG_KEY: ${{ secrets.CONSUL_CONFIG_KEY }}
      OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
      OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_USER:  ${{ secrets.SSH_USER }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
    steps:
      # 用于拉取代码
      - name: Check out repository code
        uses: actions/checkout@v4
      # 设置GO语言环境
      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'
          # 自建Runner需要关闭缓存，否在会报错
          # 在issue https://github.com/actions/setup-go/issues/403 提及
          cache: true

      - name: Install UPX
        if: steps.cache-upx.outputs.cache-hit != 'true'
        run: |
          curl -L https://github.com/upx/upx/releases/download/v5.0.1/upx-5.0.1-amd64_linux.tar.xz -o upx.tar.xz
          tar -xf upx.tar.xz
          mkdir -p ~/upx
          mv upx-*/upx ~/upx

      - name: Add UPX to PATH
        run: echo "$HOME/upx" >> $GITHUB_PATH

      - name: Update Go dependencies
        run: |
          # 更新依赖
          go get -u ./... && go mod tidy

      - name: Build Application
        run: |
          sh scripts/build.sh
      - name: Cleanup existing Docker container and image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "🔍 Checking and cleaning existing Docker container and image..."

            # ========= 1. 移除旧容器 ==========
            CONTAINER_ID=$(docker ps -a -q --filter "name=^/${{ env.CONTAINER_NAME }}$")

            if [ -n "$CONTAINER_ID" ]; then
              echo "🛑 Removing container: ${{ env.CONTAINER_NAME }} ($CONTAINER_ID)"
              docker rm -f "$CONTAINER_ID" || true
              echo "✅ Container removed."
            else
              echo "ℹ️ No container named ${{ env.CONTAINER_NAME }} found."
            fi

            # ========= 2. 移除旧镜像 ==========
            IMAGE_ID=$(docker images -q ${{ env.IMAGE_NAME }}:latest)

            if [ -n "$IMAGE_ID" ]; then
              echo "🧹 Removing image: ${{ env.IMAGE_NAME }}:latest ($IMAGE_ID)"
              docker rmi -f "$IMAGE_ID" || true
              echo "✅ Image removed."
            else
              echo "ℹ️ No image named ${{ env.IMAGE_NAME }}:latest found."
            fi

      - name: Upload artifact to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "myapp,Dockerfile"
          target: "/home/docker-images/${{ env.IMAGE_NAME }}"

      - name: Build Docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /home/docker-images/${{ env.IMAGE_NAME }}

            # 使用 Dockerfile 构建镜像，并指定镜像名称为${{ env.IMAGE_NAME }}
            docker build -t ${{ env.IMAGE_NAME }}:latest .
            
             # 启动新镜像的容器，指定容器名称为${{ env.CONTAINER_NAME }}
            docker run -d \
            --network docker-compose_app-net \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            -e GIN_MODE=release \
            -e CONSUL_ADDR=${{ env.CONSUL_ADDR }} \
            -e CONSUL_CONFIG_KEY=${{ env.CONSUL_CONFIG_KEY }} \
            -e OSS_ACCESS_KEY_ID=${{ env.OSS_ACCESS_KEY_ID }} \
            -e OSS_ACCESS_KEY_SECRET=${{ env.OSS_ACCESS_KEY_SECRET }} \
            ${{ env.IMAGE_NAME }}:latest

         
            
            
