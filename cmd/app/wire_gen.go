// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"Art-Design-Backend/config"
	"Art-Design-Backend/internal/bootstrap"
	"Art-Design-Backend/internal/controller"
	"Art-Design-Backend/internal/repository"
	"Art-Design-Backend/internal/service"
	"Art-Design-Backend/pkg/ai"
	"Art-Design-Backend/pkg/container"
	"Art-Design-Backend/pkg/middleware"
)

// Injectors from wire.go:

// 构造函数是因为初始化时有其他操作
// wire.Struct则只需要构造一个结构体
func wireApp() *bootstrap.HttpServer {
	configConfig := config.LoadConfig()
	logger := bootstrap.InitLogger(configConfig)
	db := bootstrap.InitGorm(configConfig, logger)
	redisWrapper := bootstrap.InitRedis(configConfig)
	jwt := bootstrap.InitJWT(configConfig)
	configMiddleware := config.ProviderMiddlewareConfig()
	middlewares := &middleware.Middlewares{
		Db:     db,
		Redis:  redisWrapper,
		Jwt:    jwt,
		Config: configMiddleware,
	}
	engine := bootstrap.InitGin(middlewares, logger, configMiddleware)
	userRepository := repository.NewUserRepository(db)
	roleRepository := repository.NewRoleRepository(db)
	userRolesRepository := repository.NewUserRolesRepository(db)
	gormTransactionManager := repository.NewGormTransactionManager(db)
	defaultUserConfig := config.ProvideDefaultUserConfig()
	authService := &service.AuthService{
		UserRepo:          userRepository,
		RoleRepo:          roleRepository,
		UserRolesRepo:     userRolesRepository,
		GormTX:            gormTransactionManager,
		Redis:             redisWrapper,
		Jwt:               jwt,
		DefaultUserConfig: defaultUserConfig,
	}
	authController := controller.NewAuthController(engine, middlewares, authService)
	ossClient := bootstrap.InitOSSClient(configConfig)
	userService := &service.UserService{
		UserRepo:          userRepository,
		RoleRepo:          roleRepository,
		UserRolesRepo:     userRolesRepository,
		GormTX:            gormTransactionManager,
		OssClient:         ossClient,
		Redis:             redisWrapper,
		DefaultUserConfig: defaultUserConfig,
	}
	userController := controller.NewUserController(engine, middlewares, userService)
	menuRepository := repository.NewMenuRepository(db)
	roleMenusRepository := repository.NewRoleMenusRepository(db)
	syncMap := container.NewSyncMap()
	menuService := &service.MenuService{
		MenuRepo:      menuRepository,
		RoleRepo:      roleRepository,
		RoleMenusRepo: roleMenusRepository,
		UserRolesRepo: userRolesRepository,
		Redis:         redisWrapper,
		MenuListLocks: syncMap,
	}
	menuController := controller.NewMenuController(engine, middlewares, menuService)
	roleService := &service.RoleService{
		RoleRepo:      roleRepository,
		MenuRepo:      menuRepository,
		RoleMenusRepo: roleMenusRepository,
		GormTX:        gormTransactionManager,
		Redis:         redisWrapper,
	}
	roleController := controller.NewRoleController(engine, middlewares, roleService)
	digitPredictRepository := repository.NewDigitPredictRepository(db)
	digitPredict := bootstrap.InitDigitPredict(configConfig)
	digitPredictService := &service.DigitPredictService{
		DigitPredictRepo:   digitPredictRepository,
		DigitPredictClient: digitPredict,
		OssClient:          ossClient,
	}
	digitPredictController := controller.NewDigitPredictController(engine, middlewares, digitPredictService)
	aiModelRepository := repository.NewAIModelRepository(db)
	aiModelClient := ai.NewAIModelClient()
	aiModelService := &service.AIModelService{
		AIModelRepo:   aiModelRepository,
		GormTX:        gormTransactionManager,
		AIModelClient: aiModelClient,
		Redis:         redisWrapper,
	}
	aiModelController := controller.NewAIModelController(engine, middlewares, aiModelService)
	httpServer := &bootstrap.HttpServer{
		Engine:                 engine,
		Logger:                 logger,
		AuthController:         authController,
		UserController:         userController,
		MenuController:         menuController,
		RoleController:         roleController,
		DigitPredictController: digitPredictController,
		AIModelController:      aiModelController,
		Config:                 configConfig,
	}
	return httpServer
}
