// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"Art-Design-Backend/config"
	"Art-Design-Backend/internal/bootstrap"
	"Art-Design-Backend/internal/controller"
	"Art-Design-Backend/internal/repository"
	"Art-Design-Backend/internal/repository/cache"
	"Art-Design-Backend/internal/repository/db"
	"Art-Design-Backend/internal/service"
	"Art-Design-Backend/pkg/ai"
	"Art-Design-Backend/pkg/middleware"
)

// Injectors from wire.go:

// 构造函数是因为初始化时有其他操作
// wire.Struct则只需要构造一个结构体
func wireApp() *bootstrap.HttpServer {
	configConfig := config.LoadConfig()
	logger := bootstrap.InitLogger(configConfig)
	gormDB := bootstrap.InitGorm(configConfig, logger)
	redisWrapper := bootstrap.InitRedis(configConfig)
	jwt := bootstrap.InitJWT(configConfig)
	configMiddleware := config.ProviderMiddlewareConfig()
	middlewares := middleware.NewMiddlewares(gormDB, redisWrapper, jwt, configMiddleware)
	engine := bootstrap.InitGin(middlewares, logger, configMiddleware)
	userDB := db.NewUserDB(gormDB)
	userCache := cache.NewUserCache(redisWrapper)
	roleCache := cache.NewRoleCache(redisWrapper)
	userRepo := repository.NewUserRepo(userDB, userCache, roleCache)
	authCache := cache.NewAuthCache(redisWrapper)
	authRepo := repository.NewAuthRepo(authCache)
	roleDB := db.NewRoleDB(gormDB)
	roleMenusDB := db.NewRoleMenusDB(gormDB)
	userRolesDB := db.NewUserRolesDB(gormDB)
	roleRepo := repository.NewRoleRepo(roleDB, roleMenusDB, roleCache, userCache, userRolesDB)
	gormTransactionManager := db.NewGormTransactionManager(gormDB)
	defaultUserConfig := config.ProvideDefaultUserConfig()
	authService := &service.AuthService{
		UserRepo:          userRepo,
		AuthRepo:          authRepo,
		RoleRepo:          roleRepo,
		GormTX:            gormTransactionManager,
		Jwt:               jwt,
		DefaultUserConfig: defaultUserConfig,
	}
	authController := controller.NewAuthController(engine, middlewares, authService)
	ossClient := bootstrap.InitOSSClient(configConfig)
	userService := &service.UserService{
		RoleRepo:          roleRepo,
		UserRepo:          userRepo,
		AuthRepo:          authRepo,
		GormTX:            gormTransactionManager,
		OssClient:         ossClient,
		DefaultUserConfig: defaultUserConfig,
	}
	userController := controller.NewUserController(engine, middlewares, userService)
	menuDB := db.NewMenuDB(gormDB)
	menuCache := cache.NewMenuCache(redisWrapper)
	menuRepo := repository.NewMenuRepo(menuDB, menuCache, roleMenusDB)
	menuService := &service.MenuService{
		MenuRepo: menuRepo,
		RoleRepo: roleRepo,
	}
	menuController := controller.NewMenuController(engine, middlewares, menuService)
	roleService := &service.RoleService{
		RoleRepo: roleRepo,
		MenuRepo: menuRepo,
		GormTX:   gormTransactionManager,
	}
	roleController := controller.NewRoleController(engine, middlewares, roleService)
	digitPredictDB := db.NewDigitPredictDB(gormDB)
	digitPredictRepo := repository.NewDigitPredictRepo(digitPredictDB)
	digitPredict := bootstrap.InitDigitPredict(configConfig)
	digitPredictService := &service.DigitPredictService{
		DigitPredictRepo:   digitPredictRepo,
		DigitPredictClient: digitPredict,
		OssClient:          ossClient,
	}
	digitPredictController := controller.NewDigitPredictController(engine, middlewares, digitPredictService)
	aiModelDB := db.NewAIModelDB(gormDB)
	aiModelCache := cache.NewAIModelCache(redisWrapper)
	aiModelRepo := repository.NewAIModelRepo(aiModelDB, aiModelCache)
	aiModelClient := ai.NewAIModelClient()
	aiModelService := &service.AIModelService{
		AIModelRepo:   aiModelRepo,
		AIModelClient: aiModelClient,
		GormTX:        gormTransactionManager,
	}
	aiModelController := controller.NewAIModelController(engine, middlewares, aiModelService)
	httpServer := &bootstrap.HttpServer{
		Engine:                 engine,
		Logger:                 logger,
		AuthController:         authController,
		UserController:         userController,
		MenuController:         menuController,
		RoleController:         roleController,
		DigitPredictController: digitPredictController,
		AIModelController:      aiModelController,
		Config:                 configConfig,
	}
	return httpServer
}
